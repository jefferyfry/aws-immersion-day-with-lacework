<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Immersion Day with Lacework</title>
    <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/</link>
    <description>Recent content on AWS Immersion Day with Lacework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://lacework-alliances.github.io/aws-immersion-day-with-lacework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Access Your Temporary AWS Account</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/1_event_engine_setup/11_aws_event_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/1_event_engine_setup/11_aws_event_account.html</guid>
      <description>Only complete this section if you are running the workshop through an AWS hosted event.
 For an AWS hosted event, you are provided with an AWS account through the AWS Event Engine service using a 12-digit hash by event staff. This is your unique access code.
1 . Go to https://dashboard.eventengine.run/.
 Enter the provided hash code in the text box.
 Click on the Accept Terms &amp;amp; Login button.</description>
    </item>
    
    <item>
      <title>Access Lacework</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/1_event_engine_setup/12_lacework_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/1_event_engine_setup/12_lacework_account.html</guid>
      <description> Check for your Lacework invitation email.  Click on the JOIN NOW button to be taken to Lacework. Accept the terms.  Welcome to Lacework!   </description>
    </item>
    
    <item>
      <title>Lacework Global Dashboard</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/21_global_dashboard.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/21_global_dashboard.html</guid>
      <description>The Global Dashboard displays a visual summary of the following items:
 All CloudTrail, network, user, and process events ingested by Lacework Entity behaviors identified by Lacework Events and critical events generated by Lacework   You can filter on a timeframe using the Last … drop-down located in the upper right corner. You can filter from the last 24 hours to 90 days (or 180 days if you have subscribed for additional storage).</description>
    </item>
    
    <item>
      <title>Lacework Global Search</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/22_global_search.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/22_global_search.html</guid>
      <description>Lacework’s global search provides the ability to search across a number of assets in Lacework as shown in the figure below. To start a search, click Search and enter text in the search bar and Lacework immediately returns results when the search finds any assets that match the entered string, within the following time constraints:
 Events created in the last 90 days Networks accessed in the last 7 days All other assets created or accessed in the last 30 days   Click on the Search in the top left.</description>
    </item>
    
    <item>
      <title>AWS Compliance</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/23_aws_compliance.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/23_aws_compliance.html</guid>
      <description>Lacework’s AWS security platform automatically validates all configurations against the controls established as best practices for securing your cloud environment. Our interactive reports deliver insights into “passed or failed” controls with recommendations on how to fix out-of-compliance configuration components.
 Navigate to the Compliance Dashboard page in the Lacework Console, select Compliance &amp;gt; AWS &amp;gt; Dashboard. This dashboard provides a view of your AWS accounts that are integrated with Lacework and their related compliance information and details.</description>
    </item>
    
    <item>
      <title>Container and Host Vulnerabilities</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/24_container_vulnerabilities.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/24_container_vulnerabilities.html</guid>
      <description>Lacework provides the ability to assess, identify, and report vulnerabilities found on hosts, containers, registries and pods within your environment. This means you can identify and take action on software vulnerabilities in your environment and manage that risk proactively.
Lacework continuously assesses vulnerability risks, identifies OS packages, and correlates them with publicly known vulnerabilities with risk ratings by severity and CVSS scores.
In this section, we will explore container vulnerabilities. Lacework several types of container/image scanning as well as providing runtime protection.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/25_resources.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/25_resources.html</guid>
      <description>The Lacework Console provides visibility into AWS resources that are integrated with Lacework. A resource can be any entity within the cloud deployment, such as an S3 bucket, security group, or EC2 instance. The Resource Inventory page allows you to view and monitor in-use AWS resources’ risk, compliance, and configuration changes and provides visibility for team members with limited or no access to the AWS Management Console. Because Lacework takes regular snapshots of your resources, you can track their changes (diffs) through the Lacework Console.</description>
    </item>
    
    <item>
      <title>Policies</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/26_policies.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/26_policies.html</guid>
      <description>Lacework policies provide a framework for validating configuration and behavior in your cloud environment. Lacework provides a set of predefined default policies that are visible from the Lacework Console. You can use the default policies to suppress the generation of unwanted alerts in your environment. Default policy IDs start with the LW_ prefix. You may want to create custom policies that check for unwanted behavior in your environment such as Telnet being used in your environment.</description>
    </item>
    
    <item>
      <title>Alert Channels and Rules</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/27_alert_channels_rules.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/2_lacework_aws_overview/27_alert_channels_rules.html</guid>
      <description>Lacework combines alert channels and alert rules to provide a flexible method for routing alerts. For alert channels (outgoing integrations), you define information about where to send alerts, such as to Jira or Slack. For alert rules, you define information about which alert types to send, such as critical and high severity compliance alerts. This two-part method provides the flexibility to define multiple channels and multiple rules and then have each rule use the channels you specify.</description>
    </item>
    
    <item>
      <title>How It Works</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/31_how_it_works.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/31_how_it_works.html</guid>
      <description>The Lacework AWS Control Tower integration audits and monitors AWS accounts in your AWS Control Tower Landing Zone. Your Landing Zone is your multi-account environment for which you can apply your governance, auditing and monitoring. On initial setup, the Lacework AWS Control Tower integration creates a new cross-account role in the Log Archive account and a new SQS queue is set up in the Audit account. The SQS queue allows Lacework to receive notifications of new audit logs in S3 from the centralized CloudTrail that collects activity from all accounts.</description>
    </item>
    
    <item>
      <title>Lacework Control Tower Integration Setup</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/32_lct_integration_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/32_lct_integration_setup.html</guid>
      <description>In this section, we will walk through the installation of the Lacework AWS Control Tower integration with CloudFormation. The installation requires using your Lacework console to create API credentials and your AWS CloudFormation console to deploy an integration stack.
Prerequisites You need the following prerequisites to implement the Lacework AWS Control Tower integration.
 AWS Control Tower with a Landing Zone. For information about setting up an AWS Control Tower landing zone, see Getting Started with AWS Control Tower in the AWS Control Tower User Guide.</description>
    </item>
    
    <item>
      <title>Generate a Lacework API Access Key</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/33_api_access_key.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/33_api_access_key.html</guid>
      <description>A Lacework API access key is used by the Lacework AWS Control Tower integration to make API calls and configure Lacework accounts. Follow the next steps to create the key.
 In your Lacework Console, go to Settings &amp;gt; API Keys.  Click on the Create New button in the upper right to create a new API key. Provide a name and description and click Save. Click the download button to download the API keys file.</description>
    </item>
    
    <item>
      <title>Launch the AWS CloudFormation Template</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/34_launch_cloudformation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/34_launch_cloudformation.html</guid>
      <description>The Lacework AWS Control Tower integration uses CloudFormation to install StackSets, IAM roles, Lambda functions and SQS queues that support the integration. Follow the next steps to install the integration through your AWS CloudFormation console.
 Login in to AWS master account with Administrator permissions. Select the AWS region where your AWS Control Tower is deployed. Click on the following Launch Stack button to go to your CloudFormation console and launch the AWS Control Integration template.</description>
    </item>
    
    <item>
      <title>Validate the Setup</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/35_validate_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/3_aws_control_tower/35_validate_integration.html</guid>
      <description>You can validate the integration by checking the cloud accounts in your Lacework console. If you chose to monitor existing accounts, any ACTIVE AWS accounts will be added along with the master account for the centralized CloudTrail logging. Follow the next steps to verify the accounts.
 Login to your Lacework Cloud Security Platform console. Go to Settings &amp;gt; Cloud Accounts. You should see a list of AWS accounts that are now being monitored by Lacework.</description>
    </item>
    
    <item>
      <title>Anatomy of the Attack</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/4_cspm_plus/41_anatomy_attack.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/4_cspm_plus/41_anatomy_attack.html</guid>
      <description>In this scenario, we simulate the typical ransomware actions where an attacker gains access to sensitive data.
 An attacker gains access to a bastion host that is exposed to the internet. From the bastion host, the attacker scans for s3 buckets (using the preinstalled AWS CLI). The attacker discovers an S3 bucket with sensitive documents. The attacker uses encryption keys to encrypt the documents.  </description>
    </item>
    
    <item>
      <title>Cloud Security Compliance</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/4_cspm_plus/42_compliance.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/4_cspm_plus/42_compliance.html</guid>
      <description>Lacework’s AWS security platform automatically validates all configurations against the controls established as best practices for securing your cloud environment. The first step in preventing an attack is secure your cloud configuration. Lacework monitors your AWS environments and notifies you of security misconfigurations.
 Go to Compliance &amp;gt; AWS &amp;gt; Reports in the Lacework Console to display the AWS Compliance Reports page. The AWS CIS Benchmark and S3 Report provides S3 configuration validation.</description>
    </item>
    
    <item>
      <title>Lacework Security Events</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/4_cspm_plus/43_events.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/4_cspm_plus/43_events.html</guid>
      <description>You don&amp;rsquo;t need to continually monitor your compliance reports for issues in your cloud configuration. Lacework notifies you through security events that gather all of the security context that you need to perform a quick investigation.
 Go to Events in your Lacework Console. The *Events** page displays a timeline of security events and allows you to filter on various attributes including severity.  Notice that the LW_S3_16 Ensure the S3 bucket has versioning enabled security event is present.</description>
    </item>
    
    <item>
      <title>The Lacework Polygraph</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/4_cspm_plus/44_polygraph.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/4_cspm_plus/44_polygraph.html</guid>
      <description>In the previous sections, we looked at prevention - identifying issues that make you vulnerable to an attack. Now we will look at Lacework&amp;rsquo;s anomaly detection events with Polygraph. The Lacework polygraph analyzes an array of cloud factors to detect breaches. There are currently six Lacework polygraph analysis groups:
 Application/process communications Application launches Machine communications Machine servers Privilege changes Insider behaviors   Go to Events in your Lacework Console.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/51_arch.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/51_arch.html</guid>
      <description>The architecture for this section is depicted below.</description>
    </item>
    
    <item>
      <title>Lacework, CodePipeline, CodeBuild, ECR &amp; EKS in CloudFormation</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/52_cloudformation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/52_cloudformation.html</guid>
      <description>Lacework, CodePipeline, CodeBuild, ECR &amp;amp; EKS for our CI/CD pipeline is provisioned using CloudFormation. We will review these CloudFormation templates.
 Go to https://github.com/jefferyfry/aws-immersion-day-with-lacework-code in your browser.  Go to the templates directory and view the setup-pipelines.template.yml. This CloudFormation template provisions CodePipeline, CodeBuild &amp;amp; ECR resources. CodeBuild requires buildspec files. Go to the app directory and view the codebuild-scan-push.yaml and codebuild-deploy-eks.yaml files. codebuild-scan-push.yaml has the commands to perform a docker build, Lacework image vulnerability scan and docker push to ECR.</description>
    </item>
    
    <item>
      <title>CodePipeline: A DevSecOps Pipeline</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/53_codepipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/53_codepipeline.html</guid>
      <description>AWS CodePipeline orchestrates our CI/CD process. It pulls our code from a S3 bucket and then uses AWS CodeBuild to build, scan and push our application container image.
 Go to AWS CodePipeline in your AWS console.  Click on the codepipeline-eks pipeline. This pipeline has three phases. The first phase, the Source phase, pulls the application source code from Amazon S3. The second phase is the Build phase and builds, scans and pushes our image.</description>
    </item>
    
    <item>
      <title>CodeBuild: Build, Scan &amp; Push</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/54_codebuild_build_scan_push.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/54_codebuild_build_scan_push.html</guid>
      <description>The Build phase includes the commands to build, scan and push our image. CodeBuild uses a build project which can be defined through a YAML file.
 Review the codebuild-scan-push.yaml again. This file defines this Build phase. In your CodePipeline console, expand Build and click on Build projects.  Click on the codebuild-build Build project.  You can view the Build history, Build details and Metrics.   </description>
    </item>
    
    <item>
      <title>Lacework Container Security: Image and Registry Scanning</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/55_lacework_inline_repo_scan.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/55_lacework_inline_repo_scan.html</guid>
      <description>The Build phase includes a Lacework vulnerability scan using the Lacework Inline Scanner. This tool scans Docker images for image and software package vulnerabilities. Additionally, Lacework has been set up to scan the Docker repositories. This allows you to detect vulnerable software and prevent it from being deployed.
 View the lines of code in the CodeBuild buildspec that include the Lacework Inline Scanner.
- export LW_ACCOUNT_NAME=$LW_ACCOUNT_NAME - export LW_ACCESS_TOKEN=$LW_ACCESS_TOKEN - export LW_SCANNER_DISABLE_UPDATES=true - rm -rf .</description>
    </item>
    
    <item>
      <title>CodeBuild: Deploy to EKS</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/56_codebuild_deploy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/56_codebuild_deploy.html</guid>
      <description>The Deploy phase pulls our image from the ECR repository and deploys to our EKS cluster. This is done using CodeBuild.
 Review the codebuild-deploy-eks.yaml again. This file defines this Deploy phase. In your CodePipeline console, expand Build and click on Build projects.  Click on the codebuild-deploy-eks Build project.  You can view the Build history, Build details and Metrics.   </description>
    </item>
    
    <item>
      <title>Execute the Pipeline</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/57_execute_pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/57_execute_pipeline.html</guid>
      <description>We have reviewed the phases of our pipeline. Let&amp;rsquo;s execute it! We will execute our pipeline manually, but it can execute automatically when the code has been updated.
 Go to AWS CodePipeline in your AWS console.  Click on the codepipeline-eks pipeline.  Click on the Release change button. This will cause the pipeline to execute.  The CodePipeline console will automatically show the progress of the build. For each phase, you can click on the Details link to see the CodeBuild logs.</description>
    </item>
    
    <item>
      <title>View Security Results in Lacework</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/58_view_security_results.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/5_vuln_workload_protection_eks/58_view_security_results.html</guid>
      <description>The architecture for this section is depicted below.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/61_arch.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/61_arch.html</guid>
      <description>The architecture for this section is depicted below.</description>
    </item>
    
    <item>
      <title>Lacework, CodePipeline, CodeBuild, ECR &amp; ECS in CloudFormation</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/62_cloudformation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/62_cloudformation.html</guid>
      <description>Lacework, CodePipeline, CodeBuild, ECR &amp;amp; EKS for our CI/CD pipeline is provisioned using CloudFormation. We will review these CloudFormation templates.
 Go to https://github.com/jefferyfry/aws-immersion-day-with-lacework-code in your browser.  Go to the templates directory and view the setup-pipelines.template.yml. This CloudFormation template provisions CodePipeline, CodeBuild &amp;amp; ECR resources. CodeBuild requires buildspec files. Go to the app directory and view the codebuild-scan-push.yaml and codebuild-deploy-ecs.yaml files. codebuild-scan-push.yaml has the commands to perform a docker build, Lacework image vulnerability scan and docker push to ECR.</description>
    </item>
    
    <item>
      <title>CodePipeline: A DevSecOps Pipeline</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/63_codepipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/63_codepipeline.html</guid>
      <description>AWS CodePipeline orchestrates our CI/CD process. It pulls our code from a S3 bucket and then uses AWS CodeBuild to build, scan and push our application container image.
 Go to AWS CodePipeline in your AWS console.  Click on the codepipeline-ecs pipeline. This pipeline has three phases. The first phase, the Source phase, pulls the application source code from Amazon S3. The second phase is the Build phase and builds, scans and pushes our image.</description>
    </item>
    
    <item>
      <title>CodeBuild: Build, Scan &amp; Push</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/64_codebuild_build_scan_push.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/64_codebuild_build_scan_push.html</guid>
      <description>The Build phase includes the commands to build, scan and push our image. CodeBuild uses a build project which can be defined through a YAML file.
 Review the codebuild-scan-push.yaml again. This file defines this Build phase. In your CodePipeline console, expand Build and click on Build projects.  Click on the codebuild-build Build project.  You can view the Build history, Build details and Metrics.   </description>
    </item>
    
    <item>
      <title>Lacework Container Security: Image and Registry Scanning</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/65_lacework_inline_repo_scan.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/65_lacework_inline_repo_scan.html</guid>
      <description>The Build phase includes a Lacework vulnerability scan using the Lacework Inline Scanner. This tool scans Docker images for image and software package vulnerabilities. Additionally, Lacework has been set up to scan the Docker repositories. This allows you to detect vulnerable software and prevent it from being deployed.
 View the lines of code in the CodeBuild buildspec that include the Lacework Inline Scanner.
- export LW_ACCOUNT_NAME=$LW_ACCOUNT_NAME - export LW_ACCESS_TOKEN=$LW_ACCESS_TOKEN - export LW_SCANNER_DISABLE_UPDATES=true - rm -rf .</description>
    </item>
    
    <item>
      <title>CodeBuild: Deploy to ECS</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/66_codebuild_deploy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/66_codebuild_deploy.html</guid>
      <description>The Deploy phase pulls our image from the ECR repository and deploys to our ECS cluster. This is done using CodeBuild.
 Review the codebuild-deploy-ecs.yaml again. This file defines this Deploy phase. In your CodePipeline console, expand Build and click on Build projects.  Click on the codebuild-deploy-ecs Build project.  You can view the Build history, Build details and Metrics.   </description>
    </item>
    
    <item>
      <title>Execute the Pipeline</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/67_execute_pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/67_execute_pipeline.html</guid>
      <description>We have reviewed the phases of our pipeline. Let&amp;rsquo;s execute it! We will execute our pipeline manually, but it can execute automatically when the code has been updated.
 Go to AWS CodePipeline in your AWS console.  Click on the codepipeline-ecs pipeline.  Click on the Release change button. This will cause the pipeline to execute.  The CodePipeline console will automatically show the progress of the build. For each phase, you can click on the Details link to see the CodeBuild logs.</description>
    </item>
    
    <item>
      <title>View Security Results in Lacework</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/68_view_security_results.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/6_vuln_workload_protection_ecs/68_view_security_results.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Survey</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/099_survey/_index.ee.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/099_survey/_index.ee.html</guid>
      <description> Survey To help us improve this product, please take some time to fill out the  Survey  </description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/cleanup.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/resources.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/resources.html</guid>
      <description> Lacework Platform Documentation - The full Lacework Platform documentation.  </description>
    </item>
    
    <item>
      <title>Schedule</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/schedule.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day-with-lacework/schedule.html</guid>
      <description>Intro Lacework/Session Overview (Slides) - 10 mins Environment Setup (Hands-on) - 10 mins Platform Overview (Hands-on/Demo) - 20 mins AWS Control Tower (Demo) - 15 mins Advanced Cloud Security Posture Management CSPM+ (Hands-on/Demo) 15 mins DevSecOps 3 Pipelines (Hands-on/Demo) - 20 mins Security Hub Preview (Demo) - 15 mins  Total time: 1 hr 45 mins</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Immersion Day with Lacework</title>
    <link>https://lacework-alliances.github.io/aws-immersion-day/</link>
    <description>Recent content on AWS Immersion Day with Lacework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://lacework-alliances.github.io/aws-immersion-day/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Access Your Temporary AWS Account</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/1_event_engine_setup/11_aws_event_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/1_event_engine_setup/11_aws_event_account.html</guid>
      <description>Only complete this section if you are running the workshop through an AWS hosted event.
For an AWS hosted event, you are provided with a temporary AWS account through the AWS Workshop Studio Service. Event staff will provide you a link to your temporary AWS account and workshop content.
Accept the terms and conditions and click on the Join event button. Access the workshop content on the left pane. Click on the Open AWS Console button to access the AWS console.</description>
    </item>
    
    <item>
      <title>Access Lacework</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/1_event_engine_setup/12_lacework_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/1_event_engine_setup/12_lacework_account.html</guid>
      <description>Use the following instructions to access your Lacework account for this event
Click on the Lacework Event Engine link that is provided for this event. Enter your email address, name and company. Then click Submit. Look for an invitation email in your inbox. Click on the Join Now link in the email. Next, enter your email address and click Get sign in link. Look for a Lacework - login information email in your inbox.</description>
    </item>
    
    <item>
      <title>CloudTrail and AWS Configuration Integration via Console and CloudFormation</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/21_cloudformation_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/21_cloudformation_setup.html</guid>
      <description>The Lacework platform platform at a minimum requires integration with the AWS configuration for an account in order to check security posture of resources. CloudTrail is recommended in order to monitor user, API and resource activity for suspicious behavior. AI/ML are applied to this activity in order to detect anomalous behavior.
Navigate to Settings &amp;gt; Integrations &amp;gt; Cloud Accounts in your console. Click + Add New. Select AWS. Select CloudTrail+Config or Config and click Next.</description>
    </item>
    
    <item>
      <title>Multi-Account Onboarding with AWS Control Tower</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/22_aws_control_tower.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/22_aws_control_tower.html</guid>
      <description>With Lacework and AWS Control Tower, enrolling a new AWS account now means security best practices and monitoring are automatically applied consistently across your organization. Account administrators can automatically add Lacework&amp;rsquo;s security auditing and monitoring to AWS accounts seamlessly. All the required Lacework and AWS account configurations that allow access to AWS configuration and CloudTrail logs are managed for you by Lacework’s AWS Control Tower integration.
The Lacework AWS Control Tower integration audits and monitors AWS accounts in your AWS Control Tower Landing Zone.</description>
    </item>
    
    <item>
      <title>EC2, EKS, ECS, Fargate Agent Integration</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/23_agent_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/23_agent_integration.html</guid>
      <description>For hosts, container services and Kubernetes, optional agents can be installed to enable security monitoring at the edge of the cloud. Lacework agents are lightweight and send network and process telemetry for security analysis. Lacework agents are supported on most x86, ARM and container runtimes. The Lacework Agent also supports AWS Graviton processors and is AWS Graviton Ready. Deploying an agent requires an agent access token and using the installation method that is appropriate for your environment.</description>
    </item>
    
    <item>
      <title>Agentless Workload Scanning</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/24_agentless_workload_scanning.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/24_agentless_workload_scanning.html</guid>
      <description>Agentless workload scanning enables you to quickly gain comprehensive visibility into vulnerability risks and secrets across your cloud workloads — without the need to install agents. With this option, you have more flexibility and choice to scan and detect vulnerabilities and secrets across all hosts and container images to meet your coverage needs.
Lacework&amp;rsquo;s agentless scanning technology is designed to be private by design. Snapshots are created in a customer account and then shared / copied to a customer managed cloud account.</description>
    </item>
    
    <item>
      <title>EKS (Kubernetes) Control Plane Integration</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/25_kubernetes_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/25_kubernetes_integration.html</guid>
      <description>All Kubernetes activities, whether manual activities with the kubectl tool, or automated, results in one or more API calls to the Kubernetes API server. Lacework can ingest these events to monitor activities, including kubectl exec, port-forwarding, deployment of new resources such as workloads, Kubernetes roles and role bindings, deletion of resources, authentication issues, forbidden API calls, and more. The Lacework Polygraph Data Platform surface the most important events such as the execution of rogue containers, the deployment of misconfigured workloads, the addition of dangerous roles, or manual login to containers.</description>
    </item>
    
    <item>
      <title>ECR Container Registry Integration</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/26_registry_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/26_registry_integration.html</guid>
      <description>If your development teams are doing microservices development and delivering container images, Lacework can be enabled to scan your images for software vulnerabilities. Lacework can scan OS and software packages and alert you to vulnerabilities. Lacework supports the most popular container registries including Amazon Elastic Container Registry (ECR).
Lacework also has a proxy scanner which allows Lacework to perform container vulnerability assessments for your on-premises Docker container image registries without exposing them to external connectivity.</description>
    </item>
    
    <item>
      <title>CodePipeline, CodeBuild CI/CD Integration</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/27_cicd_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/27_cicd_integration.html</guid>
      <description>With Lacework, you can also discover software vulnerabilities during your software build process. This is done through use of the Lacework inline scanner. The Lacework inline scanner can be integrated with many CI/CD tools including AWS CodePipeline and CodeBuild. You can see AWS CodePipeline and CodeBuild examples in the DevSecOps modules. Similar to the container registry scanning, the inline scanner can detect software vulnerabilities in OS and software packages.The inline scanner is configured in the Container Registries settings menu:</description>
    </item>
    
    <item>
      <title>Lacework Dashboard</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/31_global_dashboard.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/31_global_dashboard.html</guid>
      <description>The Dashboard provides a quick view of your cloud security posture. It displays various security risks in the areas of compliance, identities, vulnerabilities, and attack paths.
The Dashboard is configurable and can be customized to display the information that is most important to you. You can filter by resource groups and issue severities.</description>
    </item>
    
    <item>
      <title>Resource Explorer</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/32_resource_explorer.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/32_resource_explorer.html</guid>
      <description>Resource Explorer is a security tool that grants you visibility into your multi-cloud environments and their resources and risks. We offer support for AWS, Azure, and Google Cloud environments and enable you to view, search, sort, and filter among all resources across these environments—with no limit.
With security analysts in mind, resource Explorer introduces a new level of practicality with the following capabilities:
Real-time resource monitoring: Provides immediate visibility into cloud resources, facilitating the prompt detection of unauthorized or suspicious activities.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/33_search.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/33_search.html</guid>
      <description>In the Discovery left navigation section of the Lacework Console, Lacework lets you perform a global search of assets known to Lacework.
To start a search, click Search and enter text in the search bar. Constrain the search using any of the available filters.
Lacework returns results when the search finds any assets that match the entered string, within the following time constraints:
Alerts created in the last 180 days. Networks, Kubernetes clusters, pods, and namespaces accessed in the last 7 days.</description>
    </item>
    
    <item>
      <title>Alerts</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/34_alerts.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/34_alerts.html</guid>
      <description>By default, the Alerts page displays all alerts. You can use the following methods to refine the list of displayed alerts:
Use filters to display a subset of specific alerts. Click the filter groups along the top of the page to display the list of filters associated with the selected filter group, then select the filters that you want to apply. Click Show more to display all the filter groups.</description>
    </item>
    
    <item>
      <title>Cloud logs</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/35_cloud_logs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/35_cloud_logs.html</guid>
      <description>The Cloud Logs menu item allows you to access your cloud audit logs: AWS Cloudtrail, Azure Activity Log &amp;amp; GCP Audit Log. This enables you to analyze and investigate security events and activity seen in the logs.
In the Lacework Console, navigate to Cloud Logs.
Select AWS Cloudtrail.
In the Polygraph pane, select a time window where there are alerts.
Zoom and navigate to analyze the activity.
Click on the nodes to access more information.</description>
    </item>
    
    <item>
      <title>Workloads</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/36_workloads.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/36_workloads.html</guid>
      <description>The Workloads menu item allows you to access your cloud workloads running on your hosts, containers and kubernetes. This enables you to analyze and investigate security events and activity seen in the workloads.
In the Lacework Console, navigate to Workloads. Select Hosts. Click on the Machines tab. Go to the Machine properties pane. View the machines in your environment. Click on a machine to access more information. </description>
    </item>
    
    <item>
      <title>Attack Path</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/37_attack_path.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/37_attack_path.html</guid>
      <description>By combining exposure path visualizations with data about what’s actively happening in production, the Lacework Polygraph® Data Platform empowers you to easily prioritize the most impactful attack vectors in your cloud environment. You can easily and accurately pinpoint risks, collaborating across teams to investigate and remediate from a single source of truth. Attack path analysis is essential to uncovering and preventing malicious behavior.
Click on one of the attack paths to see the details of the attack path.</description>
    </item>
    
    <item>
      <title>Compliance</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/38_compliance.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/38_compliance.html</guid>
      <description>Lacework’s AWS security platform automatically validates all configurations against the controls established as best practices for securing your cloud environment. Our interactive reports deliver insights into “passed or failed” controls with recommendations on how to fix out-of-compliance configuration components.
This dashboard provides a consolidated view of your compliance across all cloud providers that are integrated with Lacework.
Use the Group by &amp;hellip; pulldown in the upper right to group your compliance by Assessment, Policy, Account or Service.</description>
    </item>
    
    <item>
      <title>Identities</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/39_identities.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/39_identities.html</guid>
      <description>The</description>
    </item>
    
    <item>
      <title>Anatomy of the Attack</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_cspm_plus/41_anatomy_attack.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_cspm_plus/41_anatomy_attack.html</guid>
      <description>
In this scenario, we simulate the typical ransomware actions where an attacker gains access to sensitive data.
An attacker gains access to a bastion host that is exposed to the internet. From the bastion host, the attacker scans for s3 buckets (using the preinstalled AWS CLI). The attacker discovers an S3 bucket with sensitive documents. The attacker uses encryption keys to encrypt the documents. </description>
    </item>
    
    <item>
      <title>Cloud Security Compliance</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_cspm_plus/42_compliance.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_cspm_plus/42_compliance.html</guid>
      <description>Lacework’s AWS security platform automatically validates all configurations against the controls established as best practices for securing your cloud environment. The first step in preventing an attack is secure your cloud configuration. Lacework monitors your AWS environments and notifies you of security misconfigurations.
Go to Compliance &amp;gt; Cloud in the Lacework Console to display the Compliance page. Choose the Group by Policy. Then for Service Category filter choose S3. Click on LW_S3_2 Ensure the S3 bucket ACL does not grant &amp;lsquo;Everyone&amp;rsquo; WRITE permission [create, overwrite, and delete S3 objects].</description>
    </item>
    
    <item>
      <title>The Lacework Anomaly Detection</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_cspm_plus/43_anomaly.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_cspm_plus/43_anomaly.html</guid>
      <description>In the previous sections, we looked at prevention - identifying issues that make you vulnerable to an attack. Now we will look at Lacework&amp;rsquo;s anomaly detection events with Polygraph. The Lacework Polygraph analyzes an array of cloud factors to detect breaches. There are currently six Lacework polygraph analysis groups:
Application/process communications Application launches Machine communications Machine servers Privilege changes Insider behaviors Click on this CloudTrail Dossier that represents malicious activity from an AWS user ec2-user.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/51_arch.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/51_arch.html</guid>
      <description>The architecture for this section is depicted below.</description>
    </item>
    
    <item>
      <title>Lacework, CodePipeline, CodeBuild, CodeGuru, ECR &amp; EKS in CloudFormation</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/52_cloudformation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/52_cloudformation.html</guid>
      <description>Lacework, CodePipeline, CodeBuild, ECR &amp;amp; EKS for our CI/CD pipeline is provisioned using CloudFormation. We will review these CloudFormation templates.
Go to https://github.com/lacework-alliances/aws-immersion-day-code in your browser. Go to the templates directory and view the setup-pipelines.template.yml. This CloudFormation template provisions CodePipeline, CodeBuild &amp;amp; ECR resources. CodeBuild requires buildspec files. Go to the app directory and view the codebuild-scan-push.yaml and codebuild-deploy-eks.yaml files. codebuild-scan-push.yaml has the commands to perform a docker build, Lacework image vulnerability scan and docker push to ECR.</description>
    </item>
    
    <item>
      <title>CodePipeline: A DevSecOps Pipeline</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/53_codepipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/53_codepipeline.html</guid>
      <description>AWS CodePipeline orchestrates our CI/CD process. It pulls our code from a S3 bucket and then uses AWS CodeBuild to build, scan and push our application container image.
Go to AWS CodePipeline in your AWS console. Click on the AWSSecuredPipeline pipeline. This pipeline has 11 phases:
Source: pulls the application source code from Amazon S3. ScanCode performs a Java code analysis and identifies security issues. ScanIaC scans the CloudFormation and Kubernetes manifest to identify security misconfigurations.</description>
    </item>
    
    <item>
      <title>Source Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/54_source_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/54_source_phase.html</guid>
      <description>The Source phase use a Codepipeline source action to pull our code from a zipped archive in an S3 bucket. This zipped archive contains our source code, K8s manifests and CodeBuild buildspec files. Other source options are also available such as Github and Bitbucket are available through Codestar Connections.
The Cloudformation specification of source from a S3 zipped archive for our workshop:
Stages: - Name: Source Actions: - Name: App ActionTypeId: Category: Source Owner: AWS Version: 1 Provider: S3 Configuration: S3Bucket: !</description>
    </item>
    
    <item>
      <title>ScanCode Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/55_scancode_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/55_scancode_phase.html</guid>
      <description>In the ScanCode phase, we check our source code for security issues using AWS CodeGuru. AWS CodeGuru can also recommend code quality improvements.
The Cloudformation specification of the ScanCode phase is as follows:
- Name: ScanCode Actions: - Name: ScanCode ActionTypeId: Category: Test Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !Ref CodeBuildScanCodeProject InputArtifacts: - Name: App OutputArtifacts: - Name: CodeScanOutput RunOrder: 2 This phase is backed by an AWS CodeBuild project CodeBuildScanCodeProject:</description>
    </item>
    
    <item>
      <title>ScanIaC Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/56_scaniac_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/56_scaniac_phase.html</guid>
      <description>In the ScanIaC phase, we check our infrastructure as code (IaC) files for security misconfigurations that could make us vulnerable due to items like mis-configured security groups, IAM policies and more. We use the Lacework CLI to check for IaC misconfigurations. Lacework IaC security can check Terraform, CloudFormation, Helm, Kustomize and Kubernetes manifest files for security issues. Our workshop codebase uses CloudFormation and Kubernetes manifests and these will be scanned.</description>
    </item>
    
    <item>
      <title>BuildScanPush Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/57_buildscanpush_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/57_buildscanpush_phase.html</guid>
      <description>In the BuildScanPush phase, we build our Docker image, scan it for software package and OS library security vulnerabilities and if it passes, we push it to ECR. The scanning for software and OS vulnerabilities is also performed by the Lacework CLI (inline scanner).
The Cloudformation specification of the BuildScanPush phase is as follows:
- Name: BuildScanPush Actions: - Name: BuildScanPush ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !</description>
    </item>
    
    <item>
      <title>ScanStagingImage Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/58_scanstagingimage_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/58_scanstagingimage_phase.html</guid>
      <description>In the ScanStagingImage phase, we scan our staging repository for software and OS vulnerabilities. Why do we do this? In our example application, we have just one image. But in a real world application you will likely have dozens of images - some authored by your teams while other are 3rd party and open-source. These all need to be checked. Again, we will use the Lacework CLI (registry scanning) to check for vulnerabilities in the staging repository.</description>
    </item>
    
    <item>
      <title>DeployToStaging Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/59_deploytostaging_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/59_deploytostaging_phase.html</guid>
      <description>In the DeployToStaging phase, we deploy our application to our staging environment - an Amazon Elastic Kubernetes Service (EKS) cluster. This is done by applying a Kubernetes deployment manifest (the one that was previously scanned as part of IaC security) that pulls our staging image.
The Cloudformation specification of the DeployToStaging phase is as follows:
- Name: DeployToStaging Actions: - Name: DeployToStaging ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !</description>
    </item>
    
    <item>
      <title>Survey</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/099_survey.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/099_survey.html</guid>
      <description>Survey To help us improve this product, please take some time to fill out the Survey </description>
    </item>
    
    <item>
      <title>Vulnerabilities</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/310_vulnerabilities.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/310_vulnerabilities.html</guid>
      <description>Lacework provides the ability to assess, identify, and report vulnerabilities found on hosts, containers, registries and pods within your environment. This means you can identify and take action on software vulnerabilities in your environment and manage that risk proactively.
Lacework continuously assesses vulnerability risks, identifies OS packages, and correlates them with publicly known vulnerabilities with risk ratings by severity and CVSS scores.
In this section, we will explore container vulnerabilities. Lacework several types of container/image scanning as well as providing runtime protection.</description>
    </item>
    
    <item>
      <title>Policies</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/311_policies.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/311_policies.html</guid>
      <description>Lacework policies provide a framework for validating configuration and behavior in your cloud environment. Lacework provides a set of predefined default policies that are visible from the Lacework Console. You can use the default policies to suppress the generation of unwanted alerts in your environment. Default policy IDs start with the LW_ prefix. You may want to create custom policies that check for unwanted behavior in your environment such as Telnet being used in your environment.</description>
    </item>
    
    <item>
      <title>Frameworks</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/312_frameworks.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/312_frameworks.html</guid>
      <description>The Frameworks menu item allows you to create your own CSPM (Cloud Security Posture Management) framework. This enables you to define your own security controls using existing policies or creating your own. You can clone from an existing framework such as CIS AWS, PCI DSS, etc. and modify it to suit your needs.
In the Lacework Console, navigate to Frameworks. Select Add Framework. Select an existing framework to clone from.</description>
    </item>
    
    <item>
      <title>Reports</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/313_reports.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/313_reports.html</guid>
      <description>Reports let you communicate compliance and security information from Lacework to your teams in a regular, automated way. Using report, you can deliver compliance and posture security report assessments as PDF files to user&amp;rsquo;s email inboxes.
In the Lacework Console, navigate to Reports. In the Reports pane, you can view the set of reports that have been generated for various accounts. Click on any report to view the details. Click on the Download button to download the report as a PDF file.</description>
    </item>
    
    <item>
      <title>Agents</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/314_agents.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/314_agents.html</guid>
      <description>The Agents menu item allows you to view the agents that are installed on your hosts. This enables you to see the details of the agents including status.
An agent provides threat detection, file integrity monitoring, vulnerability detection, and host-based intrusion detection for your Cloud or on-premises Windows, Linux and Kubernetes based workloads.
After you install the agent, the agent and the Lacework server (API endpoint) communicate with each other.</description>
    </item>
    
    <item>
      <title>Help</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/315_help.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/315_help.html</guid>
      <description>The</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/316_settings.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/316_settings.html</guid>
      <description>
The Settings menu item allows you to configure various settings in the Lacework Console. You can configure settings for the following:
Notifications - Manage outbound alert notifications. Integrations - Manage configuration of your Cloud Provider integrations for security monitoring. Configuration - Manage various configurations for Lacework. Usage - Configure and view usage data. Access Control (RBAC) - Manage Role-Based Access Control (RBAC) settings for your team. My Settings (Personal Settings) </description>
    </item>
    
    <item>
      <title>Alert Channels and Rules</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/317_alert_channels_rules.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/317_alert_channels_rules.html</guid>
      <description>Lacework combines alert channels and alert rules to provide a flexible method for routing alerts. For alert channels (outgoing integrations), you define information about where to send alerts, such as to Jira or Slack. For alert rules, you define information about which alert types to send, such as critical and high severity compliance alerts. This two-part method provides the flexibility to define multiple channels and multiple rules and then have each rule use the channels you specify.</description>
    </item>
    
    <item>
      <title>Organization Feature</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/318_organization_feature.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/318_organization_feature.html</guid>
      <description>Lacework&amp;rsquo;s Organization feature allows you to manage multiple teams and accounts in a single Lacework Console. This feature is useful for organizations that have multiple accounts across different teams and control access and visibility. You can manage all your teams and accounts from a single Lacework Console. On AWS, it is common to map to AWS Organizations and accounts.</description>
    </item>
    
    <item>
      <title>ScanStagingConfig Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/510_scanstagingconfig_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/510_scanstagingconfig_phase.html</guid>
      <description>In the ScanStagingConfig phase, we scan our staging environment and check all the active resource configurations to ensure that we don&amp;rsquo;t have misconfigurations that could make us vulnerable. To do this, we use the [Lacework CLI (compliance)] (https://docs.lacework.com/cli/compliance-reports#compliance-for-aws) to run an assessment and determine if we have any issues.
The Cloudformation specification of the ScanStagingConfig phase is as follows:
- Name: ScanStagingConfig Actions: - Name: ScanStagingConfig ActionTypeId: Category: Test Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !</description>
    </item>
    
    <item>
      <title>Approval Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/511_approvalstage_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/511_approvalstage_phase.html</guid>
      <description>In the ApprovalStage phase, we included a manual approval step before releasing the application to production. Some organizations may have an automated method of approving production deployments, use canary deployments or other methods.</description>
    </item>
    
    <item>
      <title>PromoteToProdRepo Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/512_promotetoprodrepo_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/512_promotetoprodrepo_phase.html</guid>
      <description>In the PromoteToProdRepo phase, we promote our image from a staging to production. Some applications will have multiple images that must be promoted. Depending on the type of Docker registry, promotion may involve special tagging or copying images between repositories. For ECR, we push the image to a production repository.
The Cloudformation specification of the ScanStagingConfig phase is as follows:
- Name: PromoteToProductionRepo Actions: - Name: PromoteToProductionRepo ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !</description>
    </item>
    
    <item>
      <title>ScanProdImage Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/513_scanprodimage_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/513_scanprodimage_phase.html</guid>
      <description>In the ScanProdImage phase, we scan our production repository for software and OS vulnerabilities like we did with the staging repository. Why do we do this? It&amp;rsquo;s important to scan your production repositories. In rare cases, application images may mistakenly bypass the software delivery pipeline process and end up in production. This scan is extra assurance that everything is checked. Again, we will use the Lacework CLI (registry scanning) to check for vulnerabilities in the repository.</description>
    </item>
    
    <item>
      <title>DeployToProduction Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/514_deploytoprod_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_devsecops_plus_eks/514_deploytoprod_phase.html</guid>
      <description>In the final phase, DeployToProduction, we deploy our application to our production environment. This is done by applying a Kubernetes deployment manifest (the one that was previously scanned as part of IaC security) that pulls our production image.
The Cloudformation specification of the DeployToProduction phase is as follows:
- Name: DeployToProduction Actions: - Name: DeployToProduction ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !Ref CodeBuildDeployProductionProject InputArtifacts: - Name: App OutputArtifacts: - Name: DeployProductionOutput RunOrder: 11 This phase is backed by an AWS CodeBuild project CodeBuildDeployProductionProject:</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/cleanup.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/resources.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/resources.html</guid>
      <description> Lacework Platform Documentation - The full Lacework Platform documentation. </description>
    </item>
    
    <item>
      <title>Schedule</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/schedule.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/schedule.html</guid>
      <description>Intro Lacework/Session Overview (Slides) - 15 mins Security Essentials and Best Practices (Slides) - 15 mins Environment Setup (Hands-on) - 10 mins Platform Overview (Hands-on/Demo) - 20 mins Advanced Cloud Security Posture Management CSPM+ (Hands-on/Demo) 15 mins DevSecOps+ Secured Software Delivery Pipeline (Hands-on/Demo) - 20 mins Total time: 1 hr 45 mins</description>
    </item>
    
  </channel>
</rss>

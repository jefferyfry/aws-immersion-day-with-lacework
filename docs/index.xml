<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Immersion Day with Lacework</title>
    <link>https://lacework-alliances.github.io/aws-immersion-day/</link>
    <description>Recent content on AWS Immersion Day with Lacework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://lacework-alliances.github.io/aws-immersion-day/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Access Your Temporary AWS Account</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/1_event_engine_setup/11_aws_event_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/1_event_engine_setup/11_aws_event_account.html</guid>
      <description>Only complete this section if you are running the workshop through an AWS hosted event.
 For an AWS hosted event, you are provided with an AWS account through the AWS Event Engine service using a 12-digit hash by event staff. This is your unique access code.
1 . Go to https://dashboard.eventengine.run/.
 Enter the provided hash code in the text box.
 Click on the Accept Terms &amp;amp; Login button.</description>
    </item>
    
    <item>
      <title>Access Lacework</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/1_event_engine_setup/12_lacework_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/1_event_engine_setup/12_lacework_account.html</guid>
      <description>There were two ways to access the Lacework console: (1) via the invitation email or (2) via login.
Invitation Email  If you have not used your invitation email, look for it in your inbox. Click on the Join Now link in the email.  Accept the terms.  Welcome to Lacework!   Login  If you have already used the invitation email, and you are ready to login, go to the Lacework console URL.</description>
    </item>
    
    <item>
      <title>CloudTrail and AWS Configuration Integration via Console and CloudFormation</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/21_cloudformation_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/21_cloudformation_setup.html</guid>
      <description>The Lacework platform platform at a minimum requires integration with the AWS configuration for an account in order to check security posture of resources. CloudTrail is recommended in order to monitor user, API and resource activity for suspicious behavior. AI/ML are applied to this activity in order to detect anomalous behavior.
 Navigate to Settings &amp;gt; Integrations &amp;gt; Cloud Accounts in your console. Click + Add New. Select AWS. Select CloudTrail+Config or Config and click Next.</description>
    </item>
    
    <item>
      <title>Multi-Account Onboarding with AWS Control Tower</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/22_aws_control_tower.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/22_aws_control_tower.html</guid>
      <description>With Lacework and AWS Control Tower, enrolling a new AWS account now means security best practices and monitoring are automatically applied consistently across your organization. Account administrators can automatically add Lacework&amp;rsquo;s security auditing and monitoring to AWS accounts seamlessly. All the required Lacework and AWS account configurations that allow access to AWS configuration and CloudTrail logs are managed for you by Lacework’s AWS Control Tower integration.
The Lacework AWS Control Tower integration audits and monitors AWS accounts in your AWS Control Tower Landing Zone.</description>
    </item>
    
    <item>
      <title>EC2, EKS, ECS, Fargate Agent Integration</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/23_agent_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/23_agent_integration.html</guid>
      <description>For hosts, container services and Kubernetes, optional agents can be installed to enable security monitoring at the edge of the cloud. Lacework agents are lightweight and send network and process telemetry for security analysis. Lacework agents are supported on most x86, ARM and container runtimes. The Lacework Agent also supports AWS Graviton processors and is AWS Graviton Ready. Deploying an agent requires an agent access token and using the installation method that is appropriate for your environment.</description>
    </item>
    
    <item>
      <title>EKS (Kubernetes) Control Plane Integration</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/24_kubernetes_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/24_kubernetes_integration.html</guid>
      <description>All Kubernetes activities, whether manual activities with the kubectl tool, or automated, results in one or more API calls to the Kubernetes API server. Lacework can ingest these events to monitor activities, including kubectl exec, port-forwarding, deployment of new resources such as workloads, Kubernetes roles and role bindings, deletion of resources, authentication issues, forbidden API calls, and more. The Lacework Polygraph Data Platform surface the most important events such as the execution of rogue containers, the deployment of misconfigured workloads, the addition of dangerous roles, or manual login to containers.</description>
    </item>
    
    <item>
      <title>ECR Container Registry Integration</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/25_registry_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/25_registry_integration.html</guid>
      <description>If your development teams are doing microservices development and delivering container images, Lacework can be enabled to scan your images for software vulnerabilities. Lacework can scan OS and software packages and alert you to vulnerabilities. Lacework supports the most popular container registries including Amazon Elastic Container Registry (ECR).
Lacework also has a proxy scanner which allows Lacework to perform container vulnerability assessments for your on-premises Docker container image registries without exposing them to external connectivity.</description>
    </item>
    
    <item>
      <title>CodePipeline, CodeBuild CI/CD Integration</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/26_cicd_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/2_lacework_aws_integration/26_cicd_integration.html</guid>
      <description>With Lacework, you can also discover software vulnerabilities during your software build process. This is done through use of the Lacework inline scanner. The Lacework inline scanner can be integrated with many CI/CD tools including AWS CodePipeline and CodeBuild. You can see AWS CodePipeline and CodeBuild examples in the DevSecOps modules. Similar to the container registry scanning, the inline scanner can detect software vulnerabilities in OS and software packages.The inline scanner is configured in the Container Registries settings menu:</description>
    </item>
    
    <item>
      <title>Lacework Global Dashboard</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/31_global_dashboard.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/31_global_dashboard.html</guid>
      <description>The Global Dashboard displays a visual summary of the following items:
 All CloudTrail, network, user, and process events ingested by Lacework Entity behaviors identified by Lacework Events and critical events generated by Lacework   You can filter on a timeframe using the Last … drop-down located in the upper right corner. You can filter from the last 24 hours to 90 days (or 180 days if you have subscribed for additional storage).</description>
    </item>
    
    <item>
      <title>AWS Compliance</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/32_aws_compliance.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/32_aws_compliance.html</guid>
      <description>Lacework’s AWS security platform automatically validates all configurations against the controls established as best practices for securing your cloud environment. Our interactive reports deliver insights into “passed or failed” controls with recommendations on how to fix out-of-compliance configuration components.
 Navigate to the Compliance Dashboard page in the Lacework Console, select Compliance &amp;gt; AWS &amp;gt; Dashboard. This dashboard provides a view of your AWS accounts that are integrated with Lacework and their related compliance information and details.</description>
    </item>
    
    <item>
      <title>Container and Host Vulnerabilities</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/33_container_vulnerabilities.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/33_container_vulnerabilities.html</guid>
      <description>Lacework provides the ability to assess, identify, and report vulnerabilities found on hosts, containers, registries and pods within your environment. This means you can identify and take action on software vulnerabilities in your environment and manage that risk proactively.
Lacework continuously assesses vulnerability risks, identifies OS packages, and correlates them with publicly known vulnerabilities with risk ratings by severity and CVSS scores.
In this section, we will explore container vulnerabilities.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/34_resources.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/34_resources.html</guid>
      <description>The Lacework Console provides visibility into AWS resources that are integrated with Lacework. A resource can be any entity within the cloud deployment, such as an S3 bucket, security group, or EC2 instance. The Resource Inventory page allows you to view and monitor in-use AWS resources’ risk, compliance, and configuration changes and provides visibility for team members with limited or no access to the AWS Management Console. Because Lacework takes regular snapshots of your resources, you can track their changes (diffs) through the Lacework Console.</description>
    </item>
    
    <item>
      <title>Policies</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/35_policies.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/35_policies.html</guid>
      <description>Lacework policies provide a framework for validating configuration and behavior in your cloud environment. Lacework provides a set of predefined default policies that are visible from the Lacework Console. You can use the default policies to suppress the generation of unwanted alerts in your environment. Default policy IDs start with the LW_ prefix. You may want to create custom policies that check for unwanted behavior in your environment such as Telnet being used in your environment.</description>
    </item>
    
    <item>
      <title>Alert Channels and Rules</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/36_alert_channels_rules.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/3_lacework_console_overview/36_alert_channels_rules.html</guid>
      <description>Lacework combines alert channels and alert rules to provide a flexible method for routing alerts. For alert channels (outgoing integrations), you define information about where to send alerts, such as to Jira or Slack. For alert rules, you define information about which alert types to send, such as critical and high severity compliance alerts. This two-part method provides the flexibility to define multiple channels and multiple rules and then have each rule use the channels you specify.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/41_arch.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/41_arch.html</guid>
      <description>The architecture for this section is depicted below.</description>
    </item>
    
    <item>
      <title>Lacework, CodePipeline, CodeBuild, CodeGuru, ECR &amp; EKS in CloudFormation</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/42_cloudformation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/42_cloudformation.html</guid>
      <description>Lacework, CodePipeline, CodeBuild, ECR &amp;amp; EKS for our CI/CD pipeline is provisioned using CloudFormation. We will review these CloudFormation templates.
 Go to https://github.com/lacework-alliances/aws-immersion-day-code in your browser.  Go to the templates directory and view the setup-pipelines.template.yml. This CloudFormation template provisions CodePipeline, CodeBuild &amp;amp; ECR resources. CodeBuild requires buildspec files. Go to the app directory and view the codebuild-scan-push.yaml and codebuild-deploy-eks.yaml files. codebuild-scan-push.yaml has the commands to perform a docker build, Lacework image vulnerability scan and docker push to ECR.</description>
    </item>
    
    <item>
      <title>CodePipeline: A DevSecOps Pipeline</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/43_codepipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/43_codepipeline.html</guid>
      <description>AWS CodePipeline orchestrates our CI/CD process. It pulls our code from a S3 bucket and then uses AWS CodeBuild to build, scan and push our application container image.
 Go to AWS CodePipeline in your AWS console.  Click on the AWSSecuredPipeline pipeline. This pipeline has 11 phases:
 Source: pulls the application source code from Amazon S3. ScanCode performs a Java code analysis and identifies security issues. ScanIaC scans the CloudFormation and Kubernetes manifest to identify security misconfigurations.</description>
    </item>
    
    <item>
      <title>Source Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/44_source_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/44_source_phase.html</guid>
      <description>The Source phase use a Codepipeline source action to pull our code from a zipped archive in an S3 bucket. This zipped archive contains our source code, K8s manifests and CodeBuild buildspec files. Other source options are also available such as Github and Bitbucket are available through Codestar Connections.
The Cloudformation specification of source from a S3 zipped archive for our workshop:
Stages: - Name: Source Actions: - Name: App ActionTypeId: Category: Source Owner: AWS Version: 1 Provider: S3 Configuration: S3Bucket: !</description>
    </item>
    
    <item>
      <title>ScanCode Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/45_scancode_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/45_scancode_phase.html</guid>
      <description>In the ScanCode phase, we check our source code for security issues using AWS CodeGuru. AWS CodeGuru can also recommend code quality improvements.
The Cloudformation specification of the ScanCode phase is as follows:
- Name: ScanCode Actions: - Name: ScanCode ActionTypeId: Category: Test Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !Ref CodeBuildScanCodeProject InputArtifacts: - Name: App OutputArtifacts: - Name: CodeScanOutput RunOrder: 2 This phase is backed by an AWS CodeBuild project CodeBuildScanCodeProject:</description>
    </item>
    
    <item>
      <title>ScanIaC Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/46_scaniac_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/46_scaniac_phase.html</guid>
      <description>In the ScanIaC phase, we check our infrastructure as code (IaC) files for security misconfigurations that could make us vulnerable due to items like mis-configured security groups, IAM policies and more. We use the Lacework CLI to check for IaC misconfigurations. Lacework IaC security can check Terraform, CloudFormation, Helm, Kustomize and Kubernetes manifest files for security issues. Our workshop codebase uses CloudFormation and Kubernetes manifests and these will be scanned.</description>
    </item>
    
    <item>
      <title>BuildScanPush Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/47_buildscanpush_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/47_buildscanpush_phase.html</guid>
      <description>In the BuildScanPush phase, we build our Docker image, scan it for software package and OS library security vulnerabilities and if it passes, we push it to ECR. The scanning for software and OS vulnerabilities is also performed by the Lacework CLI (inline scanner).
The Cloudformation specification of the BuildScanPush phase is as follows:
- Name: BuildScanPush Actions: - Name: BuildScanPush ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !</description>
    </item>
    
    <item>
      <title>ScanStagingImage Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/48_scanstagingimage_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/48_scanstagingimage_phase.html</guid>
      <description>In the ScanStagingImage phase, we scan our staging repository for software and OS vulnerabilities. Why do we do this? In our example application, we have just one image. But in a real world application you will likely have dozens of images - some authored by your teams while other are 3rd party and open-source. These all need to be checked. Again, we will use the Lacework CLI (registry scanning) to check for vulnerabilities in the staging repository.</description>
    </item>
    
    <item>
      <title>DeployToStaging Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/49_deploytostaging_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/49_deploytostaging_phase.html</guid>
      <description>In the DeployToStaging phase, we deploy our application to our staging environment - an Amazon Elastic Kubernetes Service (EKS) cluster. This is done by applying a Kubernetes deployment manifest (the one that was previously scanned as part of IaC security) that pulls our staging image.
The Cloudformation specification of the DeployToStaging phase is as follows:
- Name: DeployToStaging Actions: - Name: DeployToStaging ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !</description>
    </item>
    
    <item>
      <title>Anatomy of the Attack</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_cspm_plus/51_anatomy_attack.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_cspm_plus/51_anatomy_attack.html</guid>
      <description>In this scenario, we simulate the typical ransomware actions where an attacker gains access to sensitive data.
 An attacker gains access to a bastion host that is exposed to the internet. From the bastion host, the attacker scans for s3 buckets (using the preinstalled AWS CLI). The attacker discovers an S3 bucket with sensitive documents. The attacker uses encryption keys to encrypt the documents.  </description>
    </item>
    
    <item>
      <title>Cloud Security Compliance</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_cspm_plus/52_compliance.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_cspm_plus/52_compliance.html</guid>
      <description>Lacework’s AWS security platform automatically validates all configurations against the controls established as best practices for securing your cloud environment. The first step in preventing an attack is secure your cloud configuration. Lacework monitors your AWS environments and notifies you of security misconfigurations.
 Go to Compliance &amp;gt; AWS &amp;gt; Reports in the Lacework Console to display the AWS Compliance Reports page. The AWS CIS Benchmark and S3 Report provides S3 configuration validation.</description>
    </item>
    
    <item>
      <title>The Lacework Anomaly Detection</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/5_cspm_plus/53_anomaly.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/5_cspm_plus/53_anomaly.html</guid>
      <description>In the previous sections, we looked at prevention - identifying issues that make you vulnerable to an attack. Now we will look at Lacework&amp;rsquo;s anomaly detection events with Polygraph. The Lacework Polygraph analyzes an array of cloud factors to detect breaches. There are currently six Lacework polygraph analysis groups:
 Application/process communications Application launches Machine communications Machine servers Privilege changes Insider behaviors   Click on this CloudTrail Dossier that represents malicious activity from an AWS user badguy.</description>
    </item>
    
    <item>
      <title>Survey</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/099_survey/_index.ee.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/099_survey/_index.ee.html</guid>
      <description> Survey To help us improve this product, please take some time to fill out the  Survey  </description>
    </item>
    
    <item>
      <title>ScanStagingConfig Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/410_scanstagingconfig_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/410_scanstagingconfig_phase.html</guid>
      <description>In the ScanStagingConfig phase, we scan our staging environment and check all the active resource configurations to ensure that we don&amp;rsquo;t have misconfigurations that could make us vulnerable. To do this, we use the Lacework CLI (compliance) to run an assessment and determine if we have any issues.
The Cloudformation specification of the ScanStagingConfig phase is as follows:
- Name: ScanStagingConfig Actions: - Name: ScanStagingConfig ActionTypeId: Category: Test Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !</description>
    </item>
    
    <item>
      <title>Approval Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/411_approvalstage_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/411_approvalstage_phase.html</guid>
      <description>In the ApprovalStage phase, we included a manual approval step before releasing the application to production. Some organizations may have an automated method of approving production deployments, use canary deployments or other methods.</description>
    </item>
    
    <item>
      <title>PromoteToProdRepo Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/412_promotetoprodrepo_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/412_promotetoprodrepo_phase.html</guid>
      <description>In the PromoteToProdRepo phase, we promote our image from a staging to production. Some applications will have multiple images that must be promoted. Depending on the type of Docker registry, promotion may involve special tagging or copying images between repositories. For ECR, we push the image to a production repository.
The Cloudformation specification of the ScanStagingConfig phase is as follows:
- Name: PromoteToProductionRepo Actions: - Name: PromoteToProductionRepo ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !</description>
    </item>
    
    <item>
      <title>ScanProdImage Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/413_scanprodimage_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/413_scanprodimage_phase.html</guid>
      <description>In the ScanProdImage phase, we scan our production repository for software and OS vulnerabilities like we did with the staging repository. Why do we do this? It&amp;rsquo;s important to scan your production repositories. In rare cases, application images may mistakenly bypass the software delivery pipeline process and end up in production. This scan is extra assurance that everything is checked. Again, we will use the Lacework CLI (registry scanning) to check for vulnerabilities in the repository.</description>
    </item>
    
    <item>
      <title>DeployToProduction Phase</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/414_deploytoprod_phase.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/4_devsecops_plus_eks/414_deploytoprod_phase.html</guid>
      <description>In the final phase, DeployToProduction, we deploy our application to our production environment. This is done by applying a Kubernetes deployment manifest (the one that was previously scanned as part of IaC security) that pulls our production image.
The Cloudformation specification of the DeployToProduction phase is as follows:
- Name: DeployToProduction Actions: - Name: DeployToProduction ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !Ref CodeBuildDeployProductionProject InputArtifacts: - Name: App OutputArtifacts: - Name: DeployProductionOutput RunOrder: 11 This phase is backed by an AWS CodeBuild project CodeBuildDeployProductionProject:</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/cleanup.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/resources.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/resources.html</guid>
      <description> Lacework Platform Documentation - The full Lacework Platform documentation.  </description>
    </item>
    
    <item>
      <title>Schedule</title>
      <link>https://lacework-alliances.github.io/aws-immersion-day/schedule.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lacework-alliances.github.io/aws-immersion-day/schedule.html</guid>
      <description>Intro Lacework/Session Overview (Slides) - 15 mins Security Essentials and Best Practices (Slides) - 15 mins Environment Setup (Hands-on) - 10 mins Platform Overview (Hands-on/Demo) - 20 mins Advanced Cloud Security Posture Management CSPM+ (Hands-on/Demo) 15 mins DevSecOps+ Secured Software Delivery Pipeline (Hands-on/Demo) - 20 mins  Total time: 1 hr 45 mins</description>
    </item>
    
  </channel>
</rss>